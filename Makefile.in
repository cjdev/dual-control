CXXFLAGS += -fPIC -fno-stack-protector -std=c++14
CFLAGS += -fPIC -fno-stack-protector

OBJS = dual_control.o request.o dual_control_integrate.o validator.o conversation.o user.o \
		sys_unistd.o sys_pwd.o token.o sys_fstream.o sys_syslog.o logger.o
TESTS = dual_control_test validator_test conversation_test request_test user_test token_test \
		logger_test
TESTOBJS = $(patsubst %,%.o,$(TESTS))
SRCS := $(OBJS:.o=.cc) $(TESTOBJS:.o=.cc)

MODULELIB = pam_dual_control.so

UNAME_S := $(shell uname -s)

.PHONY: all
all: dual_control.a .depend

dual_control.a: $(OBJS)
	ar rvs $@ $^
	ranlib $@

.PHONY: clean
clean:
	@rm -f *.o *.a
	@rm -f *_test
	@rm ./.depend

.PHONY: distclean
distclean: clean
	@git clean -xdf

.depend: $(SRCS)
	rm -f ./.depend
	$(CXX) $(CXXFLAGS) -MM $^ > ./.depend;

include .depend

$(TESTS): %: %.o $(OBJS)
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS)  -o $@ $^
	@./$@

.PHONY: test
test: $(TESTS)
	@echo Tests Passing

.PHONY: install
install: $(OBJS)
ifeq ($(UNAME_S), Linux)
	ld $(LDFLAGS) -x --shared -lpam -o $(DESTDIR)@PAM_MODULE_DIRECTORY@/$(MODULELIB) $(OBJS)
else
	@echo installation recipe not known for $(UNAME_S)
endif

.PHONY: format
format:
	@./format.sh *.cc *.h


