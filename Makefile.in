MODULEFLAGS = -fPIC -fno-stack-protector
MODULEOBJS = dual_control.o logging.o token.o
TESTOBJS = $(patsubst %.o, t_%.o, $(MODULEOBJS))
HEADERS = logging.h test_support.h token.h
MODULELIB = pam_dual_control.so
UNAME_S := $(shell uname -s)

.PHONY: all
all: dual_control.a

dual_control.a: $(MODULEOBJS)
	ar rvs $@ $^
	ranlib $@

$(MODULEOBJS): %.o: %.c $(HEADERS)
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(MODULEFLAGS) $< -o $@

$(TESTOBJS): t_%.o: %.c $(HEADERS)
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(MODULEFLAGS) -D UNIT_TEST $< -o $@

.PHONY: clean
clean:
	@rm -f *.o *.a
	@rm -f dual_control_test

.PHONY: distclean
distclean: clean
	@rm -f Makefile config.h

dual_control_test: dual_control_test.c t_dual_control.o
	$(CC) $(CFLAGS) $(CPPFLAGS) -lpam -o $@ $^

logging_test: logging_test.c t_logging.o
	$(CC) $(CFLAGS) $(CPPFLAGS) -lpam -o $@ $^

token_test: token_test.c t_token.o
	$(CC) $(CFLAGS) $(CPPFLAGS) -lpam -o $@ $^

.PHONY: test
test: dual_control_test logging_test token_test
	@./dual_control_test
	@./logging_test
	@./token_test
	@echo all tests passed

.PHONY: install
install: $(MODULEOBJS)
ifeq ($(UNAME_S), Linux)
	ld $(LDFLAGS) -x --shared -lpam -o $(DESTDIR)@PAM_MODULE_DIRECTORY@/$(MODULELIB) $(MODULEOBJS)
else
	@echo installation recipe not known for $(UNAME_S)
endif

